/******************************************************************************
 *  Description: This program decodes seven bit message and
 corrects errors in the message if there is one.

% java-introcs TOY decode.toy
 *  Input: seven bit binary message with 3 parity bits at the end
 *  Output: 4 bit binary message
 ******************************************************************************/



10: 81FF   read R[1]                     int m1 = StdIn.readInt();

11: D114   if (R[1] > 0) goto 14         if (m1 == 0xFFFF) break;
12: C114   if (R[1] == 0) goto 14
13: 0000   halt

14: 82FF   read R[2]                     int m2 = StdIn.readInt();
15: 83FF   read R[3]                     int m3 = StdIn.readInt();
16: 84FF   read R[4]                     int m4 = StdIn.readInt();

17: 85FF   read R[5]                     int p1 = StdIn.readInt();
18: 86FF   read R[6]                     int p2 = StdIn.readInt();
19: 87FF   read R[7]                     int p3 = StdIn.readInt();

1A: 7801   R[8] <- 0001                  constantOne = 1;
1B: 7D02   R[D] <- 0002                  constantTwo = 2;
1C: 7E03   R[E] <- 0003                  constantThree = 3;

1D: 4951   R[9] <- R[5] ^ R[1]           int c1 = p1 ^ m1;
1E: 4992   R[9] <- R[9] ^ R[2]           c1 = c1 ^ m2;
1F: 4994   R[9] <- R[9] ^ R[4]           c1 = c1 ^ m4;

20: 4A61   R[A] <- R[6] ^ R[1]           int c2 = p2 ^ m1;
21: 4AA3   R[A] <- R[A] ^ R[3]           c2 = c2 ^ m3;
22: 4AA4   R[A] <- R[A] ^ R[4]           c2 = c2 ^ m4;

23: 4B72   R[B] <- R[7] ^ R[2]           int c3 = p3 ^ m2;
24: 4BB3   R[B] <- R[B] ^ R[3]           c3 = c2 ^ m3;
25: 4BB4   R[B] <- R[B] ^ R[4]           c3 = c2 ^ m4;

26: 1C9A   R[C] <- R[9] + R[A]           int counter = c1 + c2;
27: 1CCB   R[C] <- R[C] + R[B]           counter += c3;
28: 2CEC   R[C] <- R[E] - R[C]           counter = constantThree - counter;
29: CC2C   if (R[C] == 0) goto 2C        if (counter == 0) {
                                         m4 = constantOne ^ m4; }
2A: 7C00   R[C] <- 0000                  counter = 0;
2B: C02E   goto 2E
2C: 4484   R[4] <- R[8] ^ R[4]
2D: C042   goto 42

2E: 1C9A   R[C] <- R[9] + R[A]           counter = c1 + c2;
2F: 2CDC   R[C] <- R[D] - R[C]           counter = constantTwo - counter;
30: CC33   if (R[C] == 0) goto 33        else if (counter == 0) {
                                         m1 = constantOne ^ m1;}
31: 7C00   R[C] <- 0000                  counter = 0;
32: C035   goto 35
33: 4181   R[1] <- R[8] ^ R[1]
34: C042   goto 42

35: 1C9B   R[C] <- R[9] + R[B]           counter = c1 + c3;
36: 2CDC   R[C] <- R[D] - R[C]           counter = constantTwo - counter;
37: CC3A   if (R[C] == 0) goto 3A        else if (counter == 0) {
                                         m2 = constantOne ^ m2;}
38: 7C00   R[C] <- 0000                  counter = 0;
39: C03C   goto 3C
3A: 4282   R[2] <- R[8] ^ R[2]
3B: C042   goto 42

3C: 1CAB   R[C] <- R[A] + R[B]           counter = c2 + c3;
3D: 2CDC   R[C] <- R[D] - R[C]           counter = constantTwo - counter;
3E: CC41   if (R[C] == 0) goto 41        else if (counter == 0) {
                                         m3 = constantOne ^ m3; }
3F: 7C00   R[C] <- 0000                  counter = 0;
40: C042   goto 42
41: 4383   R[3] <- R[8] ^ R[3]


42: 91FF   write R[1]                    StdOut.println(m1);
43: 92FF   write R[2]                    StdOut.println(m2);
44: 93FF   write R[3]                    StdOut.println(m3);
45: 94FF   write R[4]                    StdOut.println(m4);

46: 81FF   read R[1]                     //if end of file, halt
47: C011   goto 11
